This is /src/lib/chain_process/Chain.py's description:

So, why do we want this? A simple yet crucial question.

There's no certainty in the image and audio process. Some notes will not be recognized, either from the image or the
audio. I found out that I can't prevent that. And therefore, it will be unwise to try and analyse a sheet and a user's
playing based of off the assumption that we perfectly analysed everything.

So what do we do? Well I don't remember why, but I thought that it'd be best if we recognize segments from a sheet, and
compare them into segments of what the user has played. I think my thought process was the following: let's say I can't
recognize 100% of a song. Then I'll work with 80%. But which 80%? The last bar of a page is the most important one. So
we need to give different weights to different bars. But what if the user played only a segment? Wouldn't it count? And
then I realised: segments of what was played could be enough. I think this idea is mostly intuitive...

So yeah, we want to divide what was played into segments, and compare it to segments of the sheet. If there's enough
match, we can pass the page.
Chain = segment
Score = match

Okay, now what do we want a chain to have? I thought it'd be complicated because sometimes we want to chain chains
together. But apparently it's quite easy: when we chain two chains together, np.append() already turns it into one big
chain. So I don't need to use recursive functions or something like that.

So a chain has:
An array of values
An array that indicates continuity (if chain.val[x]'s index is in a difference of 1 from chain.val[x+1]'s index then
cont[x] = True. chain.cont's length is smaller than the chain's length in 1)
Score

Methods:
(should be explained in the script itself. itay.rimmler@gmail.com is my mail if it needs correction)

And finally, I will explain the way the complex methods work. If something isn't explained well, my mail is
itay.rimmler@gmail.com for clarification:

How __init__ operates:
We take exactly one note, not an array of notes or something like that, and we store its value in .val.
.cont[i] is continuity between .val[i] to .val[i + 1]. If we have a chain of 1 .val, then .cont will be an empty array.
Finally, we initialise a .score, then we make sure to calculate it with calc_score.
UPDATE: Sort, cont, and score calculation will happen only after successful matching has occurred. Not by default.

How __add__ operates:
The more general case is adding two chain objects together, so if the other additive is a note object, we will want to
turn it into a chain of 1.
After doing so, we will append the two .val's. With np.append method, we can turn these two vectors into one.
Next, if the chain has ngrp (known number of groups) that's n, and suddenly we add a chain with a note that's in grp
number n + 1, then we MUST update ngrp to at least n + 1.
Finally, we sort .val by index, we update cont, and we re-calculate the score.
UPDATE: Sort, cont, and score calculation will happen only after successful matching has occurred. Not by default.

How calc_score works:
Okay, so we shouldn't simply calculate score without any context. The whole point of scoring is to see whether the note
we just heard **matches** to the notes in the sheet. And how does the matching work? Say we have a chain from an audio
input, we can't score it unless we matched it. So we want to calculate score only if we matched it to another chain from
our image input. And how do we decide whether we matched? Well, a chain has length, independently of a match. But its
index and cont are dependent of a match. So we can apply score only after we matched, meaning only after we have legal
index (!= 0) and cont.
If we do have that though, we score according to Scoring Rules.txt that can be found in doc/chain process, and we have
our none-0 score!
It's important to mention, that if a note doesn't belong to the song, we will subtract from the score a = [1] (to
understand what 'a' is, refer to doc/chain process/Scoring Rules.txt)

How match works:
We go over each note in our own chain (loop with k iterator), and each note in other chain(loop with i iterator). We
compare the two. If they match, we start building a list of subseries of notes we manage to match (more info about
subseries in doc/chain process/SubSeries.txt), starting with the note we are currently at.
We go over the other chain from i (loop with j iterator). If we find another match, we add it to the newest subseries
in the list of subseries, then we remove the note we just found to avoid of matching the same note to the note from the
other chain twice or more.
Finally, we take only the longest subseries' notes, meaning we skip subsets of the subseries (consider the subseries
[1, 2, 3] was found. We want to prevent [1, 2], for example, from being added too).
We add the notes from all of these subseries, sort the chain, and update the cont.
NOTE: We take into account that we match the earliest case, since you play from the beginning. Attempting to play from
the middle may result in lower score. For example: Chain_from_sheet = [Do, Re, Do, Re, Mi, Fa,] with indices [1, 2, 3,
4, 5, 6]; Chain_from_input = [Do, Re, Mi, Fa], then match may interpret [1, 2, 5, 6] and not [3, 4, 5, 6]... Because,
why would you play [3, 4, 5, 6]? Since theres ambiguity here, we interpret the wrong, and with lower score, option. It
makes more sense, makes the code simpler, and to be honest, my code just happened to be this way. So instead of trying
and change it, I kept it this way. If we played two inputs: [Do Re] and [Do Re Mi Fa], how will we interpret it as
[1, 2] [3, 4, 5, 6] and not as the less likely to happen [1, 2] [1, 2, 5, 6]? Simple! We will remove from
Chain_from_sheet notes [1, 2] after matching them... But this is outside the scope of the match method, and likely will
be explained in a more relevant doc (if it wasn't, refer to itay.rimmler@gmail.com for corrections).